{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\djedw\\\\Desktop\\\\Doctor-Patient-Appointment-Calendar\\\\Doctor-Patient-Appointment-Calendar\\\\Doctor-Patient-Appointment-Calendar\\\\client\\\\src\\\\components\\\\form\\\\passwordResetForm\\\\PasswordResetForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport InputField from '../InputField';\nimport Button from '../../button/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PasswordResetForm = () => {\n  _s();\n  const [id, setId] = useState('');\n  const [email, setEmail] = useState('');\n  const [successMessage, setSuccessMessage] = useState('');\n  const [message, setMessage] = useState('');\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    if (name === 'id') {\n      setId(value);\n    } else if (name === 'email') {\n      setEmail(value);\n    }\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    try {\n      // Send a password reset request to the server\n      const response = await fetch('/password-reset', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          id,\n          email\n        })\n      });\n\n      // Handle the response from the server\n      const data = await response.json();\n      if (response.ok) {\n        // Password reset was successful\n        setSuccessMessage(data);\n        setMessage('');\n      } else {\n        // Password reset failed\n        setMessage(data);\n        setSuccessMessage('');\n      }\n    } catch (error) {\n      // Handle any errors that occurred during the request\n      console.error('Error during password reset:', error);\n      setMessage('An error occurred. Please try again later.');\n      setSuccessMessage('You have succeeded resetting your password.\\nCheck your email for confirmation');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(InputField, {\n        label: \"ID:\",\n        placeholder: \"ID\",\n        value: id,\n        name: \"id\",\n        onChange: handleChange,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputField, {\n        label: \"Email:\",\n        placeholder: \"Email\",\n        value: email,\n        name: \"email\",\n        onChange: handleChange,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        text: \"Reset Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), successMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: successMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 26\n    }, this), message && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s(PasswordResetForm, \"4Evw/1r9e1GEPscIRvMedmgmDe4=\");\n_c = PasswordResetForm;\nexport default PasswordResetForm;\nvar _c;\n$RefreshReg$(_c, \"PasswordResetForm\");","map":{"version":3,"names":["React","useState","InputField","Button","jsxDEV","_jsxDEV","PasswordResetForm","_s","id","setId","email","setEmail","successMessage","setSuccessMessage","message","setMessage","handleChange","event","name","value","target","handleSubmit","preventDefault","response","fetch","method","headers","body","JSON","stringify","data","json","ok","error","console","children","onSubmit","label","placeholder","onChange","required","fileName","_jsxFileName","lineNumber","columnNumber","type","text","_c","$RefreshReg$"],"sources":["C:/Users/djedw/Desktop/Doctor-Patient-Appointment-Calendar/Doctor-Patient-Appointment-Calendar/Doctor-Patient-Appointment-Calendar/client/src/components/form/passwordResetForm/PasswordResetForm.js"],"sourcesContent":["import React, {useState} from 'react';\r\nimport InputField from '../InputField';\r\nimport Button from '../../button/Button';\r\n\r\n\r\nconst PasswordResetForm = () => {\r\n  const [id, setId] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [successMessage, setSuccessMessage] = useState('');\r\n  const [message, setMessage] = useState('');\r\n\r\n  const handleChange = event => {\r\n    const { name, value } = event.target;\r\n    if (name === 'id') {\r\n      setId(value);\r\n    } else if (name === 'email') {\r\n      setEmail(value);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async event => {\r\n    event.preventDefault();\r\n\r\n    try {\r\n      // Send a password reset request to the server\r\n      const response = await fetch('/password-reset', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ id, email }),\r\n      });\r\n\r\n      // Handle the response from the server\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        // Password reset was successful\r\n        setSuccessMessage(data);\r\n        setMessage('');\r\n      } else {\r\n        // Password reset failed\r\n        setMessage(data);\r\n        setSuccessMessage('');\r\n      }\r\n    } catch (error) {\r\n      // Handle any errors that occurred during the request\r\n      console.error('Error during password reset:', error);\r\n      setMessage('An error occurred. Please try again later.');\r\n      setSuccessMessage('You have succeeded resetting your password.\\nCheck your email for confirmation');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit}>\r\n        <InputField\r\n          label='ID:'\r\n          placeholder='ID'\r\n          value={id}\r\n          name='id'\r\n          onChange={handleChange}\r\n          required\r\n        />\r\n        <InputField\r\n          label='Email:'\r\n          placeholder='Email'\r\n          value={email}\r\n          name='email'\r\n          onChange={handleChange}\r\n          required\r\n        />\r\n        <Button type='submit' text='Reset Password' />\r\n      </form>\r\n      {successMessage && <p>{successMessage}</p>}\r\n      {message && <p>{message}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PasswordResetForm;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AACrC,OAAOC,UAAU,MAAM,eAAe;AACtC,OAAOC,MAAM,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGzC,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM,CAACC,EAAE,EAAEC,KAAK,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAChC,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACW,cAAc,EAAEC,iBAAiB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAMe,YAAY,GAAGC,KAAK,IAAI;IAC5B,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAGF,KAAK,CAACG,MAAM;IACpC,IAAIF,IAAI,KAAK,IAAI,EAAE;MACjBT,KAAK,CAACU,KAAK,CAAC;IACd,CAAC,MAAM,IAAID,IAAI,KAAK,OAAO,EAAE;MAC3BP,QAAQ,CAACQ,KAAK,CAAC;IACjB;EACF,CAAC;EAED,MAAME,YAAY,GAAG,MAAMJ,KAAK,IAAI;IAClCA,KAAK,CAACK,cAAc,CAAC,CAAC;IAEtB,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iBAAiB,EAAE;QAC9CC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAErB,EAAE;UAAEE;QAAM,CAAC;MACpC,CAAC,CAAC;;MAEF;MACA,MAAMoB,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAElC,IAAIR,QAAQ,CAACS,EAAE,EAAE;QACf;QACAnB,iBAAiB,CAACiB,IAAI,CAAC;QACvBf,UAAU,CAAC,EAAE,CAAC;MAChB,CAAC,MAAM;QACL;QACAA,UAAU,CAACe,IAAI,CAAC;QAChBjB,iBAAiB,CAAC,EAAE,CAAC;MACvB;IACF,CAAC,CAAC,OAAOoB,KAAK,EAAE;MACd;MACAC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpDlB,UAAU,CAAC,4CAA4C,CAAC;MACxDF,iBAAiB,CAAC,gFAAgF,CAAC;IACrG;EACF,CAAC;EAED,oBACER,OAAA;IAAA8B,QAAA,gBACE9B,OAAA;MAAM+B,QAAQ,EAAEf,YAAa;MAAAc,QAAA,gBAC3B9B,OAAA,CAACH,UAAU;QACTmC,KAAK,EAAC,KAAK;QACXC,WAAW,EAAC,IAAI;QAChBnB,KAAK,EAAEX,EAAG;QACVU,IAAI,EAAC,IAAI;QACTqB,QAAQ,EAAEvB,YAAa;QACvBwB,QAAQ;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT,CAAC,eACFvC,OAAA,CAACH,UAAU;QACTmC,KAAK,EAAC,QAAQ;QACdC,WAAW,EAAC,OAAO;QACnBnB,KAAK,EAAET,KAAM;QACbQ,IAAI,EAAC,OAAO;QACZqB,QAAQ,EAAEvB,YAAa;QACvBwB,QAAQ;MAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT,CAAC,eACFvC,OAAA,CAACF,MAAM;QAAC0C,IAAI,EAAC,QAAQ;QAACC,IAAI,EAAC;MAAgB;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1C,CAAC,EACNhC,cAAc,iBAAIP,OAAA;MAAA8B,QAAA,EAAIvB;IAAc;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACzC9B,OAAO,iBAAIT,OAAA;MAAA8B,QAAA,EAAIrB;IAAO;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzB,CAAC;AAEV,CAAC;AAACrC,EAAA,CAzEID,iBAAiB;AAAAyC,EAAA,GAAjBzC,iBAAiB;AA2EvB,eAAeA,iBAAiB;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}